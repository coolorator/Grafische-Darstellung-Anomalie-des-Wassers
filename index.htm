<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interaktive Visualisierung: Dichteanomalie des Wassers</title>
    
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0;
            padding: 1rem 0;
            background-color: #f4f7f9;
            color: #333;
        }
        .container {
            width: 95%;
            max-width: 1000px;
            margin-top: 1rem;
            padding: 1.5rem;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        h1 {
            color: #005a9e;
            text-align: center;
            margin-bottom: 0.5rem;
            font-size: 1.8em;
        }
        p {
            text-align: center;
            margin-top: 0;
            color: #555;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.6;
        }
        
        /* === DIE ENTSCHEIDENDE KORREKTUR === */
        #waterVolumeChart {
            /* Diese Regel verhindert, dass der mobile Browser die ganze Seite zoomt. */
            /* Sie übergibt die Kontrolle über die Gesten an die Chart.js-Bibliothek. */
            touch-action: none;
        }

        @media (max-width: 600px) {
            h1 {
                font-size: 1.4em;
            }
            .container {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Die Dichteanomalie des Wassers</h1>
        <p>
            <b>Anleitung:</b> Zoomen Sie mit zwei Fingern (wie bei einem Foto) in den Graphen hinein. Verschieben Sie die Ansicht, indem Sie mit einem Finger nach links oder rechts wischen.
        </p>
        <canvas id="waterVolumeChart"></canvas>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>

    <script>
        // === DATENGENERIERUNG (unverändert) ===
        const labels = [];
        const waterData = [];
        const iceData = [];
        const waterVolumeCoefficient = 7.7e-6;
        const iceContractionCoefficient = 1.53e-4;
        const volumeAt4C = 1.00000;
        const volumeJumpFactor = 1.0905;

        for (let temp = 10; temp >= -20; temp -= 0.1) {
            const currentTemp = parseFloat(temp.toFixed(1));
            labels.push(currentTemp);
            if (currentTemp >= 0) {
                const volume = volumeAt4C * (1 + waterVolumeCoefficient * Math.pow(currentTemp - 4, 2));
                waterData.push({ x: currentTemp, y: volume });
                iceData.push({ x: currentTemp, y: NaN });
            } else {
                const volumeWaterAt0 = volumeAt4C * (1 + waterVolumeCoefficient * Math.pow(0 - 4, 2));
                const volumeIceAt0 = volumeWaterAt0 * volumeJumpFactor;
                const iceVolume = volumeIceAt0 * (1 + iceContractionCoefficient * currentTemp);
                iceData.push({ x: currentTemp, y: iceVolume });
                waterData.push({ x: currentTemp, y: NaN });
            }
        }
        const volumeWaterAt0 = volumeAt4C * (1 + waterVolumeCoefficient * Math.pow(0 - 4, 2));
        const volumeIceAt0 = volumeWaterAt0 * volumeJumpFactor;
        labels.push(0);
        iceData.push({x: 0, y: volumeIceAt0});

        // === CHART KONFIGURATION (unverändert) ===
        const ctx = document.getElementById('waterVolumeChart').getContext('2d');
        const waterChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels.slice().reverse(),
                datasets: [
                    {
                        label: 'Flüssiges Wasser',
                        data: waterData.slice().reverse(),
                        borderColor: 'rgba(54, 162, 235, 1)',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderWidth: 3,
                        pointRadius: 0,
                        pointHitRadius: 10,
                        tension: 0.1,
                        spanGaps: false
                    },
                    {
                        label: 'Eis',
                        data: iceData.slice().reverse(),
                        borderColor: 'rgba(173, 216, 230, 1)',
                        backgroundColor: 'rgba(173, 216, 230, 0.5)',
                        borderWidth: 3,
                        pointRadius: 0,
                        pointHitRadius: 10,
                        spanGaps: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                scales: {
                    x: {
                        type: 'linear',
                        title: { display: true, text: 'Temperatur (°C)', font: { size: 14 } },
                        min: -20,
                        max: 10
                    },
                    y: {
                        title: { display: true, text: 'Relatives Volumen', font: { size: 14 } },
                        min: 0.9999,
                        grace: '5%'
                    }
                },
                plugins: {
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'x',
                            threshold: 10
                        },
                        zoom: {
                            wheel: { enabled: true },
                            pinch: { enabled: true },
                            mode: 'x',
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) { label += ': '; }
                                if (context.parsed.y !== null) {
                                    label += context.parsed.y.toFixed(6);
                                }
                                return label;
                            }
                        }
                    },
                    legend: { position: 'top' }
                }
            }
        });
    </script>

</body>
</html>
